/* eslint-disable no-param-reassign */
const getRow = (matrix, i0) => {
  for (let i = i0; i < matrix.length; i++) {
    if (matrix[i][i0] !== 0) {
      const tempRow = matrix[i0];
      matrix[i0] = matrix[i];
      matrix[i] = tempRow;

      return;
    }
  }
};

const eliminate = (row0, i0, row) => {
  if (row[i0] !== 0) {
    const mul = row[i0] / row0[i0];

    for (let j = i0 + 1; j < row0.length; j++) {
      row[j] -= row0[j] * mul;
    }
    row[i0] = 0;
  }
};

const eliminateDown = (matrix, i0) => {
  const row0 = matrix[i0];

  for (let i = i0 + 1; i < matrix.length; i++) {
    eliminate(row0, i0, matrix[i]);
  }
};
const eliminateUp = (matrix, i0) => {
  const row0 = matrix[i0];

  for (let i = i0 - 1; i >= 0; i--) {
    eliminate(row0, i0, matrix[i]);
  }
};

/**
 * работает не во всех случаях, найти аналог?
 * вроде работает для квадратных матриц
 *
 * @param {Array<number[]>} matrixInput
 * @return { Array<number> } возвращает значения нераскрытых клеток в том же порядке в котором шли столбцы
 */
export const gauss = (matrixInput) => {
  const matrix = matrixInput.slice();
  for (let i = 0; i < matrix.length; i++) {
    matrix[i] = matrix[i].slice();
  }

  for (let i = 0; i < matrix.length - 1; i++) {
    getRow(matrix, i);
    eliminateDown(matrix, i);
  }
  for (let i = matrix.length - 1; i > 0; i--) {
    eliminateUp(matrix, i);
  }

  const result = new Array(matrix.length);

  for (let i = 0; i < result.length; i++) {
    const a = matrix[i][matrix[i].length - 1];
    const b = matrix[i][i];
    result[i] = a / b;
  }
  return result;
};
/**
 * верно работает только для горизонтальной/вертикальной непрерывной линии клеток
 *
 * @param { [number] } row номера цифр линии клеток которые соприкасаются с линией закрытых клеток
 * @return { Array< [number] > }
 */
export const generateMatrix = (row) => {
  const matrixAreaMine = row.map((digit, y) => {
    const rowChanceArea = Array(row.length)
      .fill(0)
      // .map((x) => (x >= y - 1 && x <= y + 1 ? 1 : 0));
      .map((_, x) => ([y - 1, y, y + 1].includes(x) ? 1 : 0));

    return rowChanceArea.concat(digit);
  });
  return matrixAreaMine;
};
// const matrix = generateMatrix([1, 1, 1]);

// const matrix = generateMatrix([1, 1]);
// const matrix = generateMatrix([1, 1, -1, 1, 1, 1, -1, 1, 1]);
// const matrix = generateMatrix([1, 2, 2, 2, 1]);
// const matrix = generateMatrix([1, 1, 1, 1, 1, 1]);
// gauss(matrix);
// gauss([
//   // [0, 0, 0, 0, 0, 0, 1, 0, 1], //
//   // [0, 0, 0, 0, 0, 1, 0, 0, 1], //
//   // [0, 0, 0, 1, 0, 0, 0, 0, 1], //
//   [0, 0, 1, 0, 0, 0, 1], //
//   [0, 0, 1, 0, 0, 0, 1], //
//   [0, 0, 1, 0, 0, 0, 1], //
//   [0, 0, 1, 0, 0, 0, 1], //
//   [0, 0, 1, 0, 0, 0, 1], //
//   // [1, 1], //
//   // [1, 1], //
//   // [1, 0, 0], //
// ]);
// [
//   [1, 1, 0, 0],
//   ['?', '?', 1, 0],
//   ['?', '?', 1, 0],
//   ['?', '?', 1, 0],
//   ['?', '?', '?', 1],
//   ['?', '?', '?', 1],
// ];
// const area = [
//   // [ 1,  1,  1],
//   // ['?','?', 1],
//   // ['?','?', 1],
// ];
// const row = area.map((r) => r.map((c) => (c === '?' ? 1 : 0))).flat();
// // const mat = area.map((r) => r.flatMap((c) => (c >= 0 ? row.concat(c) : [])));
// const mat = [
//   // [A, B, C, D], //
//   // [1, 1].concat(1),
//   // [1, 1].concat(1),
//   // [0, 1].concat(1),
//   // [1, 1, 0, 0].concat(1),
//   // [1, 1, 0, 0].concat(1),
//   // [0, 1, 0, 1].concat(1),
//   // // [0, 1, 0, 1].concat(1),
//   // [1, 1, 1, 1].concat(1),
//   // A  B  C  D  E
//   [1, 0, 1, 0, 0, 1],
//   [0, 0, 1, 1, 1, 1],
//   [1, 1, 1, 1, 1, 1],
// ];
// const mat = [
//   row.concat(1),
//   row.concat(1),
//   row.concat(0),
//   row.concat(0),
//   row.concat(1),
//   row.concat(1),
//   row.concat(1),
//   row.concat(0),
//   row.concat(1),
//   row.concat(1),
// ];
// gauss(mat);
// gauss([
//   [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
//   [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2],
//   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 3],
//   [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 5],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
// ]);
// var matrix = [
//   [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
//   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0],
//   [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
// ];
// var result = [[1], [1], [1], [1], [1], [1], [1], [1], [2], [1], [2], [1], [1], [2], [3], [5], [2], [0], [1], [1], [1], [1]]
// gauss([
//   [1, 1, 0, 1], //
//   [1, 1, 1, 1], //
//   [0, 1, 1, 1], //
//   // [0, 1, 0, 1], //
//   // [0, 1, 0, 1], //
//   // [0, 0, 1, 1], //
// ]);
// [
//   [0, 0, 0, 0],
//   [1, 1, 0, 0],
//   [1, 1, 0, 0],
//   [1, 1, 0, 0],
//   [1, 1, 1, 0],
//   [1, 1, 1, 0],
// ];
// console
//   .log
//   // gauss([
//   //   [1, 1, 0, 0, 0, 0, 1],
//   //   [1, 1, 1, 0, 0, 0, 1],
//   //   [0, 1, 1, 1, 0, 0, 1],
//   //   [0, 0, 1, 1, 1, 0, 1],
//   //   [0, 0, 0, 1, 1, 1, 1],
//   // ])
//   // gauss([
//   //   [1, 1, 0, 0, 0, 0, 1],
//   //   [1, 1, 1, 0, 0, 0, 1],
//   //   [1, 1, 1, 0, 0, 0, 1],
//   //   [0, 1, 1, 1, 0, 0, 1],
//   //   [0, 0, 1, 1, 1, 0, 1],
//   //   [0, 0, 0, 1, 1, 1, 1],
//   // ])
//   ();

// const xxxxx = [
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   ['?', '?', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   ['?', '?', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   ['?', '?', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   ['?', '?', '?', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//   ['?', '?', '?', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
// ];
